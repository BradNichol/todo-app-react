{"version":3,"sources":["Nav/Nav.js","QuoteBox/QuoteBox.js","DatePeriod/DatePeriod.js","Task/Task.js","AddModal/AddModal.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","classes","makeStyles","root","backgroundColor","taskNotification","marginLeft","useStyles","className","AppBar","position","Toolbar","IconButton","Badge","badgeContent","taskCount","color","QuoteBox","fetch","then","response","json","data","obj","contents","quotes","document","getElementById","innerText","quote","author","id","DatePeriod","title","Task","type","value","onClick","markCompleteFunc","completed","text","AddModal","theme","modal","display","alignItems","justifyContent","paper","padding","spacing","width","fab","bottom","right","modalForm","modalButton","marginTop","useState","open","setOpen","taskText","setTaskText","selectedDate","setSelectedDate","setType","Fab","size","aria-label","Modal","onClose","FormGroup","TextField","label","onChange","event","target","InputLabel","Select","labelId","MenuItem","utils","DateFnsUtils","date","Button","variant","addNewTaskFunc","App","task","dueDate","tasks","SetTasks","completeStrikethough","newTaskArr","map","todaysDate","format","Date","count","forEach","taskCountFunc","key","newTaskObj","Math","random","allTasks","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a0614d9a.chunk.js","sourcesContent":["import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Badge from \"@material-ui/core/Badge\";\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\n\nfunction Nav(props) {\n  const useStyles = makeStyles({\n    root: {\n      backgroundColor: \"#2b71c2\"\n    },\n\n    taskNotification: {\n        marginLeft: 'auto'\n    }\n  });\n\n  const classes = useStyles();\n  return (\n    <header className=\"container-fluid\">\n      <nav>\n        <AppBar position=\"fixed\" className={classes.root}>\n          <Toolbar>\n            GET SH*T DONE\n            <IconButton className={classes.taskNotification}>\n              <Badge badgeContent={props.taskCount} color=\"secondary\">\n                <NotificationsIcon />\n              </Badge>\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n        <Toolbar />\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./QuoteBox.css\";\n\nfunction QuoteBox() {\n  // fetch API is used to get data from URL resources\n  fetch(\"https://quotes.rest/qod?language=en\")\n    //.then returns a promise and data can be chained to next .then.\n    .then(response => {\n      //returns data in JSON format\n      return response.json();\n    })\n    .then(data => {\n      const obj = data.contents.quotes[0];\n      document.getElementById(\"quote\").innerText = `\"${obj.quote}\"`;\n      document.getElementById(\"author\").innerText = ` - ${obj.author}`;\n    });\n\n  return (\n    <div className=\"row\">\n      <div className=\"col mt-4\">\n        <div className=\"quoteBox\">\n          <p id=\"quote\"></p>\n          <p id=\"author\"></p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default QuoteBox;\n","import React from \"react\";\nimport \"./DatePeriod.css\";\n\nfunction DatePeriod(props) {\n  return (\n    <div className=\"row mt-4\">\n      <div className=\"col\">\n        <h1 className=\"PeriodTitles\">{props.title}</h1>\n      </div>\n    </div>\n  );\n}\n\nexport default DatePeriod;\n","import React from \"react\";\nimport \"./Task.css\";\n\nfunction Task(props) {\n  const handleCompletedStrikethrough = () => {\n    props.markCompleteFunc(props.id);\n  };\n\n  return (\n    <div className=\"row \">\n      <div className=\"col\">\n        <div className=\"card shadow-sm task\">\n          <div className=\"card-body\">\n            <div className=\"row\">\n              <div className=\"col-2\">\n                <input\n                  className=\"form-check-input\"\n                  type=\"checkbox\"\n                  value=\"\"\n                  onClick={handleCompletedStrikethrough}\n                />\n              </div>\n              <div className=\"col-10\">\n                {props.completed === false ? (props.text) : ( <del>{props.text}</del>)}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Task;\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker\n} from \"@material-ui/pickers\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Button from '@material-ui/core/Button';\nimport FormGroup from '@material-ui/core/FormGroup';\n\n\nconst AddModal = (props) => {\n  const useStyles = makeStyles(theme => ({\n    modal: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    },\n    paper: {\n      backgroundColor: \"#ffffff\",\n      padding: theme.spacing(2, 4, 3),\n      width: \"80%\"\n    },\n    fab: {\n      position: \"fixed\",\n      bottom: theme.spacing(2),\n      right: theme.spacing(2)\n    },\n    modalForm: {\n      padding: 10\n    },\n    modalButton: {\n      marginTop: 40\n    }\n  }));\n\n  // state to control open / close of modal\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  // state to control task input field\n  const [taskText, setTaskText] = useState(\"\");\n  const handleTaskTextChange = event => setTaskText(event.target.value);\n\n  // state to control date picker change\n  const [selectedDate, setSelectedDate] = useState();\n  const handleDateChange = date => setSelectedDate(date);\n\n  // state to control type select change\n  const [type, setType] = useState(\"\");\n  const handleTypeChange = event => setType(event.target.value);\n\n  const handleAddTask = () => {\n    props.addNewTaskFunc(taskText, type, selectedDate);\n    setTaskText(\"\");\n    setType();\n    setSelectedDate(\"\");\n    setOpen(false);\n  };\n\n  const classes = useStyles(\"\");\n\n  return (\n    <div>\n      <Fab\n        size=\"large\"\n        color=\"primary\"\n        aria-label=\"add\"\n        className={classes.fab}\n        onClick={handleOpen}\n      >\n        <AddIcon />\n      </Fab>\n\n      <Modal open={open} className={classes.modal} onClose={handleClose}>\n        <div className={classes.paper}>\n          <h3>Add A Task</h3>\n          <form>\n            <FormGroup className={classes.modalForm}>\n              <TextField id=\"task\" label=\"Task\" value={taskText} onChange={handleTaskTextChange} />\n              <InputLabel id=\"task-type\">Task Type</InputLabel>\n              <Select\n                labelId=\"task-type\"\n                id=\"task-type-select\"\n                value={type}\n                onChange={handleTypeChange}\n              >\n                <MenuItem value=\"Work\">Work</MenuItem>\n                <MenuItem value=\"Personal\">Personal</MenuItem>\n              </Select>\n\n              <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <KeyboardDatePicker\n                  value={selectedDate}\n                  label=\"Due Date\"\n                  onChange={handleDateChange}\n                />\n              </MuiPickersUtilsProvider>\n              <Button className={classes.modalButton} variant=\"contained\" color=\"primary\" onClick={handleAddTask}>\n                Add Task\n              </Button>\n            </FormGroup>\n          </form>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default AddModal;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Nav from \"./Nav/Nav\";\nimport QuoteBox from \"./QuoteBox/QuoteBox\";\nimport DatePeriod from \"./DatePeriod/DatePeriod\";\nimport Task from \"./Task/Task\";\nimport AddModal from \"./AddModal/AddModal\";\nimport {format} from \"date-fns\";\n\nfunction App() {\n  const [tasks, SetTasks] = useState([\n    {\n      id: 1,\n      task: \"Organise a meeting\",\n      type: \"work\",\n      dueDate: \"2020-03-04\",\n      completed: false\n    },\n    {\n      id: 2,\n      task: \"Quarantine\",\n      type: \"work\",\n      dueDate: \"2020-03-04\",\n      completed: false\n    },\n    {\n      id: 3,\n      task: \"Buy milk\",\n      type: \"personal\",\n      dueDate: \"2020-03-04\",\n      completed: false\n    },\n    {\n      id: 4,\n      task: \"go for a run\",\n      type: \"personal\",\n      dueDate: \"2020-03-05\",\n      completed: false\n    }\n  ]);\n\n  // function strike through tasks when complete\n  const completeStrikethough = id => {\n    const newTaskArr = tasks.map(task => {\n      if (task.id === id) {\n        if (task.completed) {\n          task.completed = false;\n        } else {\n          task.completed = true;\n        }\n      }\n      return task;\n    });\n\n    SetTasks(newTaskArr);\n  };\n\n  const addNewTask = (text, type, dueDate) => {\n    // create a new object for the task\n    const newTaskObj = {\n      id: Math.random() * 1000, // this value will come from database soon\n      task: text,\n      type: type,\n      dueDate: format(dueDate, 'dd/MM/yyyy'), // uses date-fns format\n      completed: false\n    };\n\n    // create new array to combine current tasks with the new task obj\n    const allTasks = [...tasks, newTaskObj];\n\n    SetTasks(allTasks);\n  }\n\n  // function to count 'todays' count only, not all days\n  const taskCountFunc = () => {\n    let count = 0;\n    tasks.forEach(task => {\n      if (!task.completed && task.dueDate === todaysDate) { // TODO: get todays date\n        count++;\n      }\n    });\n    return count;\n  };\n  \n  // get today's date dd/mm/yyyy\n  const todaysDate = format(new Date(),'dd/MM/yyyy');\n\n  return (\n    <div className=\"App\">\n      <Nav taskCount={taskCountFunc()} />\n      <main className=\"container\">\n        <QuoteBox />\n        <DatePeriod title=\"TODAY\" />\n        {tasks.map(task => {\n          if (task.dueDate === todaysDate) {\n            return (\n              <Task\n                key={task.id}\n                id={task.id}\n                text={task.task}\n                completed={task.completed}\n                dueDate={task.dueDate}\n                markCompleteFunc={completeStrikethough}\n              />\n            );\n          }\n        })}\n        <DatePeriod title=\"FUTURE\" />\n        {tasks.map(task => {\n          if (task.dueDate > todaysDate) {\n            return (\n              <Task\n                key={task.id}\n                id={task.id}\n                text={task.task}\n                completed={task.completed}\n                dueDate={task.dueDate}\n                markCompleteFunc={completeStrikethough}\n              />\n            );\n          }\n        })}\n        <AddModal addNewTaskFunc={addNewTask} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}