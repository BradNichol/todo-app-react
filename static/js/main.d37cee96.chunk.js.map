{"version":3,"sources":["logo.svg","Nav/Nav.js","QuoteBox/QuoteBox.js","DatePeriod/DatePeriod.js","Task/Task.js","AddModal/AddModal.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","href","id","QuoteBox","DatePeriod","props","title","Task","value","onClick","markCompleteFunc","completed","text","AddModal","useStyles","makeStyles","theme","modal","display","alignItems","justifyContent","paper","backgroundColor","padding","spacing","width","fab","position","bottom","right","useState","open","setOpen","classes","Fab","size","color","Modal","onClose","App","task","dueDate","tasks","SetTasks","completeStrikethough","newTaskArr","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d37cee96.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nfunction Nav() {\n    return (\n\n        <header className=\"container-fluid\">\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light shadow-sm\">\n                <button className=\"navbar-toggler pull-left\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\"\n                    aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <a className=\"navbar-brand\" href=\"#\">Get Sh*t Done</a>\n                <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                    <ul className=\"navbar-nav\">\n                        <li className=\"nav-item active\">\n                            <a className=\"nav-link\" href=\"#\">Home</a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"#\">Today</a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"#\">This week</a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"#\">Future</a>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n        </header>\n    );\n}\n\nexport default Nav;","import React from 'react';\nimport './QuoteBox.css';\n\nfunction QuoteBox() {\n    return (\n        <div className=\"row\">\n            <div className=\"col mt-4\">\n                <div className=\"quoteBox\">\n                    <p>\"It does not matter how slowly you go as long as you do not stop.\"</p>\n                </div>\n            </div>\n        </div>\n\n    );\n}\n\nexport default QuoteBox;","import React from 'react';\nimport './DatePeriod.css';\n\nfunction DatePeriod(props) {\n    return (\n\n        <div className=\"row mt-4\">\n            <div className=\"col\">\n                <h1 className=\"PeriodTitles\">{props.title}</h1>\n            </div>\n        </div>\n    );\n}\n\nexport default DatePeriod;","import React from 'react';\nimport './Task.css';\n\nfunction Task(props) {\n\n    const handleCompletedStrikethrough = () => {\n        props.markCompleteFunc(props.id);\n    }\n\n    return (\n        <div className=\"row \">\n            <div className=\"col\">\n                <div className=\"card shadow-sm task\">\n                    <div className=\"card-body\">\n                        <div className=\"row\">\n                            <div className=\"col-2\">\n                                <input className=\"form-check-input\" type=\"checkbox\" value=\"\" onClick={handleCompletedStrikethrough} />\n                            </div>\n                            <div className=\"col-10\">\n                                {props.completed === false ? props.text : <del>{props.text}</del>}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Task;","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\n\nconst AddModal = () => {\n\n    const useStyles = makeStyles((theme) => ({\n        modal: {\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n        },\n        paper: {\n            backgroundColor: '#ffffff',\n            padding: theme.spacing(2, 4, 3),\n            width: '80%'\n        },\n        fab: {\n            position: 'fixed',\n            bottom: theme.spacing(2),\n            right: theme.spacing(2),\n          },\n    }));\n\n    const [open, setOpen] = useState(false);\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const classes = useStyles()\n\n    return (\n        <div>\n            <Fab size=\"large\" color=\"primary\" aria-label=\"add\" className={classes.fab} onClick={handleOpen}>\n                <AddIcon />\n            </Fab>\n\n            <Modal open={open} className={classes.modal} onClose={handleClose}>\n                <div className={classes.paper}>Test Modal</div>\n            </Modal>\n        </div>\n\n    );\n}\n\nexport default AddModal;","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Nav from './Nav/Nav'\nimport QuoteBox from './QuoteBox/QuoteBox'\nimport DatePeriod from './DatePeriod/DatePeriod'\nimport Task from './Task/Task'\nimport AddModal from './AddModal/AddModal'\n\n\nfunction App() {\n\n  const [tasks, SetTasks] = useState([\n    {\n      id: 1,\n      task: \"Organise a meeting\",\n      type: \"work\",\n      dueDate: \"2020-03-04\",\n      completed: false\n    },\n    {\n      id: 2,\n      task: \"Quarantine\",\n      type: \"work\",\n      dueDate: \"2020-03-04\",\n      completed: false\n    },\n    { \n      id: 3,\n      task: \"Buy milk\",\n      type: \"personal\",\n      dueDate: \"2020-03-04\",\n      completed: false\n    }\n  \n  ]);\n\n  const completeStrikethough = (id) => {\n    \n    const newTaskArr = tasks.map(task => {\n      if (task.id === id) {\n        if (task.completed) {\n          task.completed = false;\n        } else {\n          task.completed = true;\n        }\n      }\n      return task;\n    });\n\n    SetTasks(newTaskArr);\n  };\n\n  return (\n    <div className=\"App\">\n      <Nav / >\n        <main className=\"container\">\n          <AddModal />\n          <QuoteBox />\n          <DatePeriod title=\"TODAY\" />\n          {tasks.map(task => {\n            if(task.dueDate === \"2020-03-04\") {\n            return (\n              <Task\n                key={task.id}\n                id={task.id}\n                text={task.task}\n                completed={task.completed}\n                dueDate={task.dueDate}\n                markCompleteFunc={completeStrikethough}\n              />\n            );\n          }\n          })}\n          <DatePeriod title=\"TOMORROW\" />\n          <Task text=\"Meeting at 9am\" />\n          <Task text=\"send notes to team\" />\n          \n\n        </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}