{"version":3,"sources":["Nav/Nav.js","QuoteBox/QuoteBox.js","DatePeriod/DatePeriod.js","Task/Task.js","AddModal/Form.js","AddModal/Modal.js","App.js","serviceWorker.js","index.js","Nav/GSD-03.png"],"names":["Nav","props","classes","makeStyles","theme","root","display","backgroundColor","toolbar","breakpoints","up","width","margin","taskNotification","marginLeft","useStyles","AppBar","position","className","Toolbar","alt","src","Logo","IconButton","Badge","badgeContent","taskCount","color","QuoteBox","fetch","then","response","json","data","obj","contents","quotes","document","getElementById","innerText","quote","author","expansionPanel","boxShadow","expansionPanelSummary","borderBottom","ExpansionPanel","ExpansionPanelSummary","expandIcon","ExpansionPanelDetails","id","DatePeriod","title","Task","React","useState","completed","checked","setChecked","marginTop","content","typeTab","1","2","type","Card","Checkbox","onClick","markCompleteFunc","CardContent","text","deleteTaskFunc","Form","taskText","setTaskText","Date","selectedDate","setSelectedDate","setType","onSubmit","addNewTaskFunc","handleCloseFunc","FormGroup","style","padding","TextField","label","value","onChange","event","target","required","InputLabel","Select","labelId","MenuItem","utils","DateFnsUtils","date","Button","variant","AddModal","modal","alignItems","justifyContent","paper","spacing","fab","bottom","right","open","setOpen","handleClose","Fab","size","aria-label","Modal","onClose","App","tasks","SetTasks","useEffect","axios","get","catch","err","message","setMessage","completeStrikethough","newTaskArr","map","task","task_id","put","console","log","deleteTask","delete","deletedTasks","filter","todaysDate","format","snackbar","down","count","forEach","due_date","taskCountFunc","key","type_id","dueDate","post","newTask","allTasks","Snackbar","autoHideDuration","SnackbarContent","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","URL","process","href","origin","addEventListener","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.4a03cb2f.chunk.js","sourcesContent":["import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Badge from \"@material-ui/core/Badge\";\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\nimport Logo from \"./GSD-03.png\";\n\nfunction Nav(props) {\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      display: \"flex\",\n      backgroundColor: \"#2b71c2\",\n    },\n\n    toolbar: {\n      [theme.breakpoints.up(\"lg\")]: {\n        width: \"50%\",\n        margin: \"auto\",\n      },\n    },\n\n    taskNotification: {\n      marginLeft: \"auto\",\n    },\n  }));\n\n  const classes = useStyles();\n  return (\n    <header>\n      <nav>\n        <AppBar position=\"fixed\" className={classes.root}>\n          <Toolbar className={classes.toolbar}>\n            <img alt=\"logo\" src={Logo} width=\"150\" />\n            <IconButton className={classes.taskNotification}>\n              <Badge badgeContent={props.taskCount} color=\"secondary\">\n                <NotificationsIcon />\n              </Badge>\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n        <Toolbar />\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./QuoteBox.css\";\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\n\nfunction QuoteBox() {\n  // fetch API is used to get data from URL resources\n  fetch(\"https://quotes.rest/qod?language=en\")\n    //.then returns a promise and data can be chained to next .then.\n    .then((response) => {\n      //returns data in JSON format\n      return response.json();\n    })\n    .then((data) => {\n      const obj = data.contents.quotes[0];\n      document.getElementById(\"quote\").innerText = `\"${obj.quote}\"`;\n      document.getElementById(\"author\").innerText = ` - ${obj.author}`;\n    });\n\n  \n  const useStyles = makeStyles(() => ({\n    expansionPanel: {\n      backgroundColor: '#2071C2', \n      boxShadow: 'none',\n    },\n    expansionPanelSummary: {\n      borderBottom: '1px solid #224982'\n    }\n  \n  }))\n\n  const classes = useStyles();\n\n  return (\n    <ExpansionPanel className={classes.expansionPanel}>\n      <ExpansionPanelSummary className={classes.expansionPanelSummary} expandIcon={<ExpandMoreIcon />}>\n        Quote of the day\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails>\n        <div className=\"quoteBox\">\n          <p id=\"quote\"></p>\n          <p id=\"author\"></p>\n        </div>\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  );\n}\n\nexport default QuoteBox;\n","import React from \"react\";\nimport \"./DatePeriod.css\";\n\nfunction DatePeriod(props) {\n  return (\n    <div className=\"row mt-4\">\n      <div className=\"col\">\n        <h1 className=\"PeriodTitles\">{props.title}</h1>\n      </div>\n    </div>\n  );\n}\n\nexport default DatePeriod;\n","import React from \"react\";\nimport \"./Task.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nfunction Task(props) {\n  const [checked, setChecked] = React.useState(props.completed ? true : false);\n\n  const handleCompletedStrikethrough = () => {\n    props.markCompleteFunc(props.id);\n    setChecked(props.completed ? false : true);\n  };\n\n  const handleDeleteTask = () => {\n    props.deleteTaskFunc(props.id);\n  };\n\n  // obj to hold colour values per task type\n  const typeTabColour = {\n    1: \"yellow\", // work\n    2: \"green\", // personal\n  };\n\n  const useStyles = makeStyles({\n    root: {\n      display: \"flex\",\n      backgroundColor: \"#224982\",\n      marginTop: 5,\n    },\n    content: {\n      margin: \"auto\",\n      color: \"white\",\n    },\n    typeTab: {\n      width: 10,\n      // colour pulled from obj\n      backgroundColor: typeTabColour[props.type],\n    },\n  });\n  const classes = useStyles();\n\n  return (\n    <div>\n      <Card className={classes.root}>\n        <div className={classes.typeTab}>&nbsp;</div>\n        <Checkbox\n          color=\"default\"\n          checked={checked}\n          onClick={handleCompletedStrikethrough}\n        />\n        <CardContent className={classes.content}>\n          {props.completed === 1 ? <del>{props.text}</del> : props.text}\n        </CardContent>\n        <IconButton onClick={handleDeleteTask}>\n          <DeleteIcon />\n        </IconButton>\n      </Card>\n    </div>\n  );\n}\n\nexport default Task;\n","import React, { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Button from \"@material-ui/core/Button\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\n\nconst Form = (props) => {\n  // state to control task input field\n  const [taskText, setTaskText] = useState(\"\");\n  const handleTaskTextChange = (event) => setTaskText(event.target.value);\n\n  // state to control date picker change\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const handleDateChange = (date) => setSelectedDate(date);\n\n  // state to control type select change\n  const [type, setType] = useState(\"\");\n  const handleTypeChange = (event) => setType(event.target.value);\n\n  const handleAddTask = () => {\n    props.addNewTaskFunc(taskText, type, selectedDate);\n    setTaskText(\"\");\n    setType();\n    setSelectedDate(new Date());\n    props.handleCloseFunc();\n  };\n\n  return (\n    <form onSubmit={handleAddTask}>\n        <FormGroup style={{padding:5}}>\n        <TextField\n            id=\"task\"\n            label=\"Task\"\n            value={taskText}\n            onChange={handleTaskTextChange}\n            required\n        />\n        <InputLabel id=\"task-type\">Task Type</InputLabel>\n        <Select\n            labelId=\"task-type\"\n            id=\"task-type-select\"\n            value={type}\n            onChange={handleTypeChange}\n        >\n            <MenuItem value=\"1\">Work</MenuItem>\n            <MenuItem value=\"2\">Personal</MenuItem>\n        </Select>\n\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n            value={selectedDate}\n            label=\"Due Date\"\n            onChange={handleDateChange}\n            />\n        </MuiPickersUtilsProvider>\n        <Button\n            style={{marginTop: 40}}\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n        >\n            Add Task\n        </Button>\n        </FormGroup>\n  </form>\n  )\n};\n\nexport default Form;\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Form from \"./Form\";\n\n\nconst AddModal = (props) => {\n  const useStyles = makeStyles((theme) => ({\n    modal: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    },\n    paper: {\n      backgroundColor: \"#ffffff\",\n      padding: theme.spacing(2, 4, 3),\n      width: \"auto\",\n      [theme.breakpoints.up(\"lg\")]: {\n        width: \"50%\",\n      },\n    },\n    fab: {\n      position: \"fixed\",\n      bottom: theme.spacing(2),\n      right: theme.spacing(2),\n    },\n  }));\n\n  // state to control open / close of modal\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n\n  const classes = useStyles(\"\");\n\n  return (\n    <div>\n      <Fab\n        size=\"large\"\n        color=\"primary\"\n        aria-label=\"add\"\n        className={classes.fab}\n        onClick={handleOpen}\n      >\n        <AddIcon />\n      </Fab>\n\n      <Modal open={open} className={classes.modal} onClose={handleClose}>\n        <div className={classes.paper}>\n          <h3>Add A Task</h3>\n          <Form handleCloseFunc={handleClose} {...props}/>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default AddModal;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport Nav from \"./Nav/Nav\";\nimport QuoteBox from \"./QuoteBox/QuoteBox\";\nimport DatePeriod from \"./DatePeriod/DatePeriod\";\nimport Task from \"./Task/Task\";\nimport Modal from \"./AddModal/Modal\";\nimport { format } from \"date-fns\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { SnackbarContent } from \"@material-ui/core\";\n\nfunction App() {\n  const [tasks, SetTasks] = useState([]);\n\n  useEffect(() => {\n    // fetch tasks from backend\n    axios\n      .get(\"https://2ss5e0jzw2.execute-api.eu-west-2.amazonaws.com/dev/tasks\")\n      .then((response) => {\n        SetTasks(response.data);\n      })\n      .catch((err) => {});\n  }, []);\n\n  // state to control message box (snackbar)\n  const [open, setOpen] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const handleClose = () => setOpen(false);\n\n  // function strike through tasks when complete\n  const completeStrikethough = (id) => {\n    const newTaskArr = tasks.map((task) => {\n      if (task.task_id === id) {\n        if (task.completed) {\n          task.completed = 0;\n        } else {\n          task.completed = 1;\n        }\n        axios\n          .put(\n            `https://2ss5e0jzw2.execute-api.eu-west-2.amazonaws.com/dev/tasks/${id}`,\n            {\n              completed: task.completed,\n            }\n          )\n          .then((response) => {\n            console.log(response);\n            setMessage(\"Task updated\");\n            setOpen(true);\n          })\n          .catch((err) => {\n            console.log(\"Error updating\", err);\n          });\n      }\n      return task;\n    });\n    SetTasks(newTaskArr);\n  };\n\n  const addNewTask = (text, type, dueDate) => {\n    // cpass object into axios post directly\n    axios\n      .post(\n        \"https://2ss5e0jzw2.execute-api.eu-west-2.amazonaws.com/dev/tasks\",\n        {\n          task: text,\n          type_id: type,\n          due_date: dueDate,\n        }\n      )\n      .then((response) => {\n        const newTask = response.data;\n        const allTasks = [...tasks, newTask];\n        setMessage(\"Task created\");\n        setOpen(true);\n        SetTasks(allTasks);\n      })\n      .catch((err) => {\n        console.log(\"Error creating task\", err);\n      });\n  };\n\n  // function to count 'todays' count only, not all days\n  const taskCountFunc = () => {\n    let count = 0;\n    tasks.forEach((task) => {\n      if (!task.completed && task.due_date === todaysDate) {\n        count++;\n      }\n    });\n    return count;\n  };\n  // function to \"delete\" tasks. Shows filtered list exluding task with deleted id\n  const deleteTask = (id) => {\n    axios\n      .delete(\n        `https://2ss5e0jzw2.execute-api.eu-west-2.amazonaws.com/dev/tasks/${id}`\n      )\n      .then((response) => {\n        const deletedTasks = tasks.filter((task) => {\n          setMessage(\"Task deleted\");\n          setOpen(true);\n          return task.task_id !== id;\n        });\n        SetTasks(deletedTasks);\n      })\n      .catch((err) => {\n        console.log(\"API error\", err);\n      });\n  };\n\n  // get today's date dd/mm/yyyy\n  const todaysDate = format(new Date(), \"yyyy-MM-dd'T'00:00:00.000\") + \"Z\";\n\n  // styles for components\n  const useStyles = makeStyles((theme) => ({\n    snackbar: {\n      color: \"green\",\n      [theme.breakpoints.down(\"xs\")]: {\n        bottom: 90,\n      },\n    },\n    content: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      backgroundColor: \"black\",\n    },\n  }));\n  const classes = useStyles();\n\n  return (\n    <div className=\"App\">\n      <Nav taskCount={taskCountFunc()} />\n      <main className=\"container\">\n        <QuoteBox />\n        <DatePeriod title=\"TODAY\" />\n        {tasks.map((task) => {\n          if (task.due_date === todaysDate) {\n            return (\n              <Task\n                key={task.task_id}\n                id={task.task_id}\n                text={task.task}\n                type={task.type_id}\n                completed={task.completed}\n                dueDate={task.due_date}\n                markCompleteFunc={completeStrikethough}\n                deleteTaskFunc={deleteTask}\n              />\n            );\n          }\n        })}\n        <DatePeriod title=\"FUTURE\" />\n        {tasks.map((task) => {\n          // display dates in future, but also older tasks that haven't been completed\n          if (task.due_date > todaysDate || (task.due_date < todaysDate && task.completed === 0)) {\n            return (\n              <Task\n                key={task.task_id}\n                id={task.task_id}\n                text={task.task}\n                type={task.type_id}\n                completed={task.completed}\n                dueDate={task.due_date}\n                markCompleteFunc={completeStrikethough}\n                deleteTaskFunc={deleteTask}\n              />\n            );\n          }\n        })}\n        <Modal addNewTaskFunc={addNewTask} />\n        <Snackbar\n          className={classes.snackbar}\n          open={open}\n          autoHideDuration={2000}\n          onClose={handleClose}\n        >\n          <SnackbarContent className={classes.content} message={message} />\n        </Snackbar>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/GSD-03.96554b51.png\";"],"sourceRoot":""}